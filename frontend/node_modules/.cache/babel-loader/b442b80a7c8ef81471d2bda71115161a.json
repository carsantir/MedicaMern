{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\carsa\\\\Desktop\\\\pruebaUsuarios\\\\frontend\\\\src\\\\pages\\\\ListaConsulta.jsx\";\n//import PoreCompoent for preventing unnecesary updates. \nimport React, { PureComponent } from 'react'; //import your components from react-native \n\nimport { View, Image, FlatList, TouchableOpacity, Text, ActivityIndicator } from 'react'; //import styles for your component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class ListaConsulta extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      //Assing a array to your pokeList state\n      listaConsulta: [],\n      //Have a loading state where when data retrieve returns data. \n      loading: true\n    };\n  }\n\n  //Define your componentDidMount lifecycle hook that will retrieve data.\n  //Also have the async keyword to indicate that it is asynchronous. \n  async componentDidMount() {\n    //Have a try and catch block for catching errors.\n    try {\n      //Assign the promise unresolved first then get the data using the json method. \n      const apiCall = await fetch('http://localhost:5000/enquiries');\n      const consulta = await apiCall.json();\n      this.setState({\n        listaConsulta: consulta.results,\n        loading: false\n      });\n    } catch (err) {\n      console.log(\"Error fetching data-----------\", err);\n    }\n  } //Define your renderItem method the callback for the FlatList for rendering each item, and pass data as a argument. \n\n\n  renderItem(data) {\n    return /*#__PURE__*/_jsxDEV(TouchableOpacity, {\n      style: {\n        backgroundColor: 'transparent'\n      },\n      children: /*#__PURE__*/_jsxDEV(View, {\n        style: styles.listItemContainer,\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: data.item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }, this);\n  }\n\n  render() {\n    //Destruct pokeList and Loading from state.\n    const {\n      listaConsulta,\n      loading\n    } = this.state; //If laoding to false, return a FlatList which will have data, rednerItem, and keyExtractor props used.\n    //Data contains the data being  mapped over.\n    //RenderItem a callback return UI for each item.\n    //keyExtractor used for giving a unique identifier for each item.\n\n    if (!loading) {\n      return /*#__PURE__*/_jsxDEV(FlatList, {\n        data: listaConsulta,\n        renderItem: this.renderItem,\n        keyExtractor: item => item.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(ActivityIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/carsa/Desktop/pruebaUsuarios/frontend/src/pages/ListaConsulta.jsx"],"names":["React","PureComponent","View","Image","FlatList","TouchableOpacity","Text","ActivityIndicator","ListaConsulta","state","listaConsulta","loading","componentDidMount","apiCall","fetch","consulta","json","setState","results","err","console","log","renderItem","data","backgroundColor","styles","listItemContainer","item","name","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC,C,CACA;;AACA,SAASC,IAAT,EAAcC,KAAd,EAAsBC,QAAtB,EAAgCC,gBAAhC,EAAkDC,IAAlD,EAAwDC,iBAAxD,QAAiF,OAAjF,C,CACA;;;AAEA,eAAe,MAAMC,aAAN,SAA4BP,aAA5B,CAA0C;AAAA;AAAA;AAAA,SAErDQ,KAFqD,GAE7C;AACJ;AACAC,MAAAA,aAAa,EAAE,EAFX;AAGJ;AACAC,MAAAA,OAAO,EAAE;AAJL,KAF6C;AAAA;;AAQrD;AACA;AACuB,QAAjBC,iBAAiB,GAAG;AACtB;AACA,QAAI;AACA;AACA,YAAMC,OAAO,GAAG,MAAMC,KAAK,CAAC,iCAAD,CAA3B;AACA,YAAMC,QAAQ,GAAG,MAAMF,OAAO,CAACG,IAAR,EAAvB;AACA,WAAKC,QAAL,CAAc;AAACP,QAAAA,aAAa,EAAEK,QAAQ,CAACG,OAAzB;AAAkCP,QAAAA,OAAO,EAAE;AAA3C,OAAd;AACH,KALD,CAKE,OAAMQ,GAAN,EAAW;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,GAA9C;AACH;AACJ,GApBoD,CAqBrD;;;AACAG,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,wBAAO,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAE;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAAzB;AAAA,6BACK,QAAC,IAAD;AAAO,QAAA,KAAK,EAAEC,MAAM,CAACC,iBAArB;AAAA,+BACI,QAAC,IAAD;AAAA,oBAAOH,IAAI,CAACI,IAAL,CAAUC;AAAjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,YAAP;AAKH;;AACDC,EAAAA,MAAM,GAAG;AACL;AACA,UAAM;AAAEnB,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAA6B,KAAKF,KAAxC,CAFK,CAGL;AACA;AACA;AACA;;AACA,QAAG,CAACE,OAAJ,EAAa;AACT,0BAAO,QAAC,QAAD;AACC,QAAA,IAAI,EAAED,aADP;AAEC,QAAA,UAAU,EAAE,KAAKY,UAFlB;AAGC,QAAA,YAAY,EAAGK,IAAD,IAAUA,IAAI,CAACC;AAH9B;AAAA;AAAA;AAAA;AAAA,cAAP;AAKH,KAND,MAMO;AACH,0BAAO,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AACJ;;AA7CoD","sourcesContent":["//import PoreCompoent for preventing unnecesary updates. \nimport React, { PureComponent } from 'react';\n//import your components from react-native \nimport { View,Image,  FlatList, TouchableOpacity, Text, ActivityIndicator } from 'react';\n//import styles for your component\n\nexport default class ListaConsulta extends PureComponent {\n    //Define your state for your component. \n    state = {\n        //Assing a array to your pokeList state\n        listaConsulta: [],\n        //Have a loading state where when data retrieve returns data. \n        loading: true\n    }\n    //Define your componentDidMount lifecycle hook that will retrieve data.\n    //Also have the async keyword to indicate that it is asynchronous. \n    async componentDidMount() {\n        //Have a try and catch block for catching errors.\n        try {\n            //Assign the promise unresolved first then get the data using the json method. \n            const apiCall = await fetch('http://localhost:5000/enquiries');\n            const consulta = await apiCall.json();\n            this.setState({listaConsulta: consulta.results, loading: false});\n        } catch(err) {\n            console.log(\"Error fetching data-----------\", err);\n        }\n    }\n    //Define your renderItem method the callback for the FlatList for rendering each item, and pass data as a argument. \n    renderItem(data) {\n        return <TouchableOpacity style={{backgroundColor: 'transparent'}}>\n                    <View  style={styles.listItemContainer}>\n                        <Text>{data.item.name}</Text>\n                    </View>\n                </TouchableOpacity>\n    }\n    render() {\n        //Destruct pokeList and Loading from state.\n        const { listaConsulta, loading } = this.state;\n        //If laoding to false, return a FlatList which will have data, rednerItem, and keyExtractor props used.\n        //Data contains the data being  mapped over.\n        //RenderItem a callback return UI for each item.\n        //keyExtractor used for giving a unique identifier for each item.\n        if(!loading) {\n            return <FlatList \n                    data={listaConsulta}\n                    renderItem={this.renderItem}\n                    keyExtractor={(item) => item.name} \n                    />\n        } else {\n            return <ActivityIndicator />\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}